from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message
import re
import json
import random

from TGBot.filters.is_moderated_tread import IsModeratedTread
from TGBot.group_chat.group_commands import all_commands
from TGBot.filters.sticker_inban import StickerFilter
from database.models import FunAnswersOrm
from database.repository import UserRepository, FunsRepository
from database.cash import RedisClient
from config.configuration import config

member_command = Router()
member_command.message.filter(F.chat.type.in_({"group", "supergroup"}))
cash = RedisClient(1)


@member_command.message(F.text.lower().regexp("^–∫–∞–π –º–Ω–µ –Ω–∏–∫\\s"))
async def set_user_nickname(message: Message):
    new_nickname = message.text[re.match("^–∫–∞–π –º–Ω–µ –Ω–∏–∫\\s", message.text.lower()).span()[1]:]
    if len(new_nickname) <= 16:
        await UserRepository.set_user_nickname(message.from_user.id, new_nickname)
        await message.reply(f"–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º: {new_nickname}")
        await cash.delete("nicknames")
    else:
        await message.reply("–î–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ - 16 —Å–∏–º–≤–æ–ª–æ–≤!")


# –ö–æ–º–∞–Ω–¥–∞ –ö–∞–π –Ω–∏–∫–∏
@member_command.message(F.text.lower().regexp("^–∫–∞–π –Ω–∏–∫–∏$"), IsModeratedTread())
async def get_all_nicknames(message: Message, use_links: bool = False):
    all_nicknames = await cash.get("nicknames", serial=True)
    if all_nicknames is not None:
        return await message.answer(all_nicknames, parse_mode="HTML", disable_notification=True)

    all_nicknames_list = await UserRepository.get_all_users()
    if all_nicknames_list is None:
        return await message.answer(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")

    all_nicknames_string = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞:\n\n"
    counter = 1
    for user in all_nicknames_list:
        if user.nickname is None:
            continue
        if use_links:
            all_nicknames_string += f"{counter}. <a href='tg://user?id={user.tg_id}'>{user.nickname}</a> \
- {user.name}\n"
        else:
            all_nicknames_string += f"{counter}. {user.nickname} - {user.name}\n"
        counter += 1

    await cash.set("nicknames", all_nicknames_string, serial=True)
    await message.answer(all_nicknames_string, parse_mode="HTML", disable_notification=True)


# –ö–æ–º–∞–Ω–¥–∞ –ö–∞–π –∫—Ç–æ —è
@member_command.message(F.text.lower().regexp("^–∫–∞–π –∫—Ç–æ —è$"), IsModeratedTread())
async def who_am_i(message: Message):
    answer: str = await cash.get(f"{message.from_user.id}_fun", serial=True)
    if answer is not None:
        return await message.reply(answer)

    answer: FunAnswersOrm = random.choice(await FunsRepository.get_all_answers())
    await FunsRepository.set_user_fun_answer(message.from_user.id, message.chat.id, answer.answer)
    date = datetime.now()
    date_tomorrow = datetime.date(date + timedelta(1))
    date_final = (datetime(date_tomorrow.year, date_tomorrow.month, date_tomorrow.day) - date).seconds
    await cash.set(f"{message.from_user.id}_fun", answer.answer, serial=True, ex=date_final)
    await message.reply(answer.answer)


@member_command.message(F.text.lower().regexp("^–∫–∞–π –ø–æ–≥–æ–¥–∞\\s"), IsModeratedTread())
async def get_weather(message: Message):

    city = message.text[re.match("^–∫–∞–π –ø–æ–≥–æ–¥–∞\\s", message.text.lower()).span()[1]:]
    for symbol in "0123456789!@#$%^&*()_!\"~`‚Ññ;%:?*+'<>/|":
        if symbol in city:
            return await message.reply("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    import aiohttp
    async with aiohttp.ClientSession() as session:
         # TODO –°–∫—Ä—ã—Ç—å API –∫–ª—é—á / –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        async with session.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}\
&appid={config.WEATHER}&units=metric&lang=ru") as response:
            if response.status == 200:
                weather = await response.text()
                data = json.loads(weather)
                weather_data = f"""üåç –ü–æ–≥–æ–¥–∞ –≤ \'{data['name']}\' \n
–°–µ–π—á–∞—Å: {round(data['main']['temp'])}¬∞ ({data['weather'][0]['description'].capitalize()})
ü´†–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(data['main']['feels_like'])}¬∞
üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%
‚òÅ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {data['clouds']['all']}%
üëÄ–í–∏–¥–∏–º–æ—Å—Ç—å: {data['visibility']} –º"""
                await message.reply(weather_data)
            else:
                await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, —É–∫–∞–∑–∞–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥.")


@member_command.message(F.text.lower().regexp("^–∫–∞–π –∏–Ω—Ñ–∞\\s"), IsModeratedTread())
async def get_probability(message: Message):
    percent = random.randint(0, 100)
    await message.reply(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {percent}%!")


@member_command.message(F.text.lower().regexp("^–∫–∞–π –≤—ã–±–µ—Ä–∏\\s"), IsModeratedTread())
async def go_choice(message: Message):
    what = message.text[re.match("^–∫–∞–π –≤—ã–±–µ—Ä–∏\\s", message.text.lower()).span()[1]:].split(" –∏–ª–∏ ")
    if len(what) == 1:
        await message.reply(f"–¢—è–∂–µ–ª—ã–π –≤—ã–±–æ—Ä... –ø–æ–∂–∞–ª—É–π, {what[0]} –õ–û–õ!")
        return
    random_choice = random.choice(what)
    await message.reply(f"–Ø –≤—ã–±–∏—Ä–∞—é: {random_choice}!")


@member_command.message(F.text.lower().regexp("^–∫–∞–π –∫–æ–º–∞–Ω–¥—ã$"), IsModeratedTread())
async def get_commands(message: Message):
    await message.reply(all_commands, disable_notification=True, parse_mode="MarkdownV2")


# –ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
@member_command.message(F.sticker, StickerFilter())
async def check_sticker(message: Message):
    await message.delete()
